"""
CARLA 注册表生成脚本

该脚本用于生成匹配 CARLA 服务端的注册表枚举类, 并写入到 carla1s.registry 模块中以供便捷代码访问.
"""
import os
import carla
import logging
import argparse

from rich.logging import RichHandler


def create_template_class(class_name: str, file_name: str):
    """
    创建一个模板类, 用于生成注册表枚举类的抬头内容.
    :param class_name: 类名.
    :param file_name: 文件名.
    """
    logger.info(f'Creating template class: {class_name} -> {file_name}')

    builder = ''
    builder += f'# 该类由脚本 generate_registry.py 自动生成, 请勿手动修改!\n'
    builder += f'# This class is generated by script generate_registry.py, do not modify manually!\n'
    builder += f'\n'
    builder += f'from enum import Enum\n'
    builder += f'\n\n'
    builder += f'class {class_name}(Enum):\n'

    with open(file_name, 'w') as f:
        f.write(builder)

    return

def create_enum_key(key: str) -> str:
    return key.replace('.', '_') \
              .replace('-', '_') \
              .replace(' ', '_') \
              .upper()

def write_enum_value(file_name: str, key: str, value: str):
    """
    写入一个枚举值.
    :param file_name: 文件名.
    :param key: 键名.
    :param value: 键值.
    """
    logger.debug(f'Writing enum value: {key} = "{value}" -> {file_name.split("/")[-1]}')
    builder = f'    {key} = "{value}"\n'
    with open(file_name, 'a') as f:
        f.write(builder)

def main():
    logger.info('Script begin: Generate Registry')

    # 获取路径信息
    path_this = os.path.realpath(__file__)
    path_root = os.path.dirname(path_this)
    path_registry = os.path.join(path_root, 'registry')

    logger.info(f'Path of this script: {path_this}')
    logger.info(f'Path of carla1s root: {path_root}')
    logger.info(f'Path of registry module: {path_registry}')

    # 连接 CARLA 服务端
    logger.info(f'Connecting to CARLA server at {CARLA_HOST}:{CARLA_PORT}')
    client: carla.Client = carla.Client(CARLA_HOST, CARLA_PORT)
    world: carla.World = client.get_world()
    bp_lib: carla.BlueprintLibrary = world.get_blueprint_library()

    # 所有的 Actor 蓝图
    create_template_class('AvailableActors', os.path.join(path_registry, 'available_actors.py'))
    count = 0
    for bp in bp_lib:
        write_enum_value(os.path.join(path_registry, 'available_actors.py'), create_enum_key(str(bp.id)), bp.id)
        count += 1
    logger.info(f'Added {count} actors to registry: AvailableActors')

    # 所有的 Sensor 蓝图
    create_template_class('AvailableSensors', os.path.join(path_registry, 'available_sensors.py'))
    count = 0
    for bp in bp_lib.filter('sensor.*'):
        write_enum_value(os.path.join(path_registry, 'available_sensors.py'), create_enum_key(str(bp.id)), bp.id)
        count += 1
    logger.info(f'Added {count} sensors to registry: AvailableSensors')

    # 所有的 Vehicle 蓝图
    create_template_class('AvailableVehicles', os.path.join(path_registry, 'available_vehicles.py'))
    count = 0
    for bp in bp_lib.filter('vehicle.*'):
        write_enum_value(os.path.join(path_registry, 'available_vehicles.py'), create_enum_key(str(bp.id)), bp.id)
        count += 1
    logger.info(f'Added {count} vehicles to registry: AvailableVehicles')

    # 所有的地图名称
    create_template_class('AvailableMaps', os.path.join(path_registry, 'available_maps.py'))
    count = 0
    for map_name in client.get_available_maps():
        key = map_name.split('/')[-1].replace('.', '_').upper()
        write_enum_value(os.path.join(path_registry, 'available_maps.py'), key, map_name)
        count += 1
    logger.info(f'Added {count} maps to registry: AvailableMaps')

    logger.info('Script end: Generate Registry')


if __name__ == '__main__':
    argparse = argparse.ArgumentParser()
    argparse.add_argument('--host', type=str, default='127.0.0.1', help='CARLA server IP address')
    argparse.add_argument('--port', type=int, default=2000, help='CARLA server IP port')
    argparse.add_argument('--debug', action='store_true', help='Enable debug mode')
    args = argparse.parse_args()

    # 创建 Logger 实例
    logger = logging.getLogger('carla1s.generate_registry')
    if args.debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(RichHandler(rich_tracebacks=True))

    # 设置 CARLA 服务端连接信息
    CARLA_HOST = args.host
    CARLA_PORT = args.port

    main()
